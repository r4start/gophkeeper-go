// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/storage.proto

package gophkeeper

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StorageClient is the client API for Storage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorageClient interface {
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (Storage_ListClient, error)
	Add(ctx context.Context, opts ...grpc.CallOption) (Storage_AddClient, error)
	Get(ctx context.Context, in *Resource, opts ...grpc.CallOption) (Storage_GetClient, error)
	Delete(ctx context.Context, in *Resource, opts ...grpc.CallOption) (*ResourceOperationResponse, error)
}

type storageClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageClient(cc grpc.ClientConnInterface) StorageClient {
	return &storageClient{cc}
}

func (c *storageClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (Storage_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &Storage_ServiceDesc.Streams[0], "/gophkeeper.Storage/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &storageListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Storage_ListClient interface {
	Recv() (*Resource, error)
	grpc.ClientStream
}

type storageListClient struct {
	grpc.ClientStream
}

func (x *storageListClient) Recv() (*Resource, error) {
	m := new(Resource)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storageClient) Add(ctx context.Context, opts ...grpc.CallOption) (Storage_AddClient, error) {
	stream, err := c.cc.NewStream(ctx, &Storage_ServiceDesc.Streams[1], "/gophkeeper.Storage/Add", opts...)
	if err != nil {
		return nil, err
	}
	x := &storageAddClient{stream}
	return x, nil
}

type Storage_AddClient interface {
	Send(*ResourceOperationData) error
	CloseAndRecv() (*ResourceOperationResponse, error)
	grpc.ClientStream
}

type storageAddClient struct {
	grpc.ClientStream
}

func (x *storageAddClient) Send(m *ResourceOperationData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *storageAddClient) CloseAndRecv() (*ResourceOperationResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ResourceOperationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storageClient) Get(ctx context.Context, in *Resource, opts ...grpc.CallOption) (Storage_GetClient, error) {
	stream, err := c.cc.NewStream(ctx, &Storage_ServiceDesc.Streams[2], "/gophkeeper.Storage/Get", opts...)
	if err != nil {
		return nil, err
	}
	x := &storageGetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Storage_GetClient interface {
	Recv() (*ResourceOperationData, error)
	grpc.ClientStream
}

type storageGetClient struct {
	grpc.ClientStream
}

func (x *storageGetClient) Recv() (*ResourceOperationData, error) {
	m := new(ResourceOperationData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storageClient) Delete(ctx context.Context, in *Resource, opts ...grpc.CallOption) (*ResourceOperationResponse, error) {
	out := new(ResourceOperationResponse)
	err := c.cc.Invoke(ctx, "/gophkeeper.Storage/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageServer is the server API for Storage service.
// All implementations must embed UnimplementedStorageServer
// for forward compatibility
type StorageServer interface {
	List(*ListRequest, Storage_ListServer) error
	Add(Storage_AddServer) error
	Get(*Resource, Storage_GetServer) error
	Delete(context.Context, *Resource) (*ResourceOperationResponse, error)
	mustEmbedUnimplementedStorageServer()
}

// UnimplementedStorageServer must be embedded to have forward compatible implementations.
type UnimplementedStorageServer struct {
}

func (UnimplementedStorageServer) List(*ListRequest, Storage_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedStorageServer) Add(Storage_AddServer) error {
	return status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedStorageServer) Get(*Resource, Storage_GetServer) error {
	return status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedStorageServer) Delete(context.Context, *Resource) (*ResourceOperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedStorageServer) mustEmbedUnimplementedStorageServer() {}

// UnsafeStorageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageServer will
// result in compilation errors.
type UnsafeStorageServer interface {
	mustEmbedUnimplementedStorageServer()
}

func RegisterStorageServer(s grpc.ServiceRegistrar, srv StorageServer) {
	s.RegisterService(&Storage_ServiceDesc, srv)
}

func _Storage_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StorageServer).List(m, &storageListServer{stream})
}

type Storage_ListServer interface {
	Send(*Resource) error
	grpc.ServerStream
}

type storageListServer struct {
	grpc.ServerStream
}

func (x *storageListServer) Send(m *Resource) error {
	return x.ServerStream.SendMsg(m)
}

func _Storage_Add_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StorageServer).Add(&storageAddServer{stream})
}

type Storage_AddServer interface {
	SendAndClose(*ResourceOperationResponse) error
	Recv() (*ResourceOperationData, error)
	grpc.ServerStream
}

type storageAddServer struct {
	grpc.ServerStream
}

func (x *storageAddServer) SendAndClose(m *ResourceOperationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *storageAddServer) Recv() (*ResourceOperationData, error) {
	m := new(ResourceOperationData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Storage_Get_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Resource)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StorageServer).Get(m, &storageGetServer{stream})
}

type Storage_GetServer interface {
	Send(*ResourceOperationData) error
	grpc.ServerStream
}

type storageGetServer struct {
	grpc.ServerStream
}

func (x *storageGetServer) Send(m *ResourceOperationData) error {
	return x.ServerStream.SendMsg(m)
}

func _Storage_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Resource)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gophkeeper.Storage/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).Delete(ctx, req.(*Resource))
	}
	return interceptor(ctx, in, info, handler)
}

// Storage_ServiceDesc is the grpc.ServiceDesc for Storage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Storage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gophkeeper.Storage",
	HandlerType: (*StorageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Delete",
			Handler:    _Storage_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _Storage_List_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Add",
			Handler:       _Storage_Add_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Get",
			Handler:       _Storage_Get_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/storage.proto",
}
